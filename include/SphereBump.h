#ifndef SPHEREBUMP_H__
#define SPHEREBUMP_H__

/// @file SphereBump.h
/// @brief a simple class to test collisions between two spheres

#include <ngl/Camera.h>
#include <ngl/Vec3.h>
#include <ngl/Transformation.h>
#include <ngl/VAOPrimitives.h>
#include <ngl/ShaderLib.h>

//----------------------------------------------------------------------------------------------------------------------
///  @class SphereBump "include/SphereBump.h"
///  @brief Simple class to test collision between the player sphere and a new sphere
///  @author Ruth Hutton
///  @version 1.0
///  @date Last Revision 30/03/17 \n
//----------------------------------------------------------------------------------------------------------------------

class SphereBump
{
public:

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief SphereBump ctor using the position of the sphere
    ///  @param[in]  _pos the position of the sphere.
    //----------------------------------------------------------------------------------------------------------------------
    SphereBump(ngl::Vec3 _pos);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Draw method draws the sphere using OpenGL
    //----------------------------------------------------------------------------------------------------------------------
    void draw();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Get Position method returns the position of the sphere
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 getPosition() {return m_pos;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Set hit method to call when a collision occurs
    //----------------------------------------------------------------------------------------------------------------------
    void setHit(bool _h){m_hit=_h;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Is hit method retuns m_hit, used to determine if there is a collision
    //----------------------------------------------------------------------------------------------------------------------
    bool isHit() const {return m_hit;}

private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A vec3 to store the position of the sphere
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_pos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief An NGL transformation attribute
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Transformation m_transform;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Set m_hit to false as default
    //----------------------------------------------------------------------------------------------------------------------
    bool m_hit=false;

};

#endif
