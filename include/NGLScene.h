#ifndef WINDOW_H_
#define WINDOW_H_
///--------------------------------------------------------------------
/// @file NGLScene.h
/// @brief NGLScene main class
///--------------------------------------------------------------------
#include "Sphere.h"
#include "SphereBump.h"
#include "EnemyState.h"
#include "Enemy.h"
#include "Space.h"
#include "Terrain.h"
#include "GeneralObj.h"
#include "GameMenu.h"
#include "Timer.h"
#include "Emitter.h"
#include "UI.h"
#include "Gameplay.h"
#include <ngl/Camera.h>
#include <ngl/Colour.h>
#include <ngl/Light.h>
#include <ngl/Transformation.h>
#include <ngl/VertexArrayObject.h>
#include <ngl/Text.h>
#include <ngl/Obj.h>
#include <QOpenGLWindow>
#include <memory>
#include <QSet>

///--------------------------------------------------------------------
/// @class NGLScene
/// @brief This class combines all other classes to create our game
/// @author Tia-Louise Heeger, Arielle Martin, Stiliana Gospodinova, Ruth Hutton, Arnold Sule, Caterina Malfe', Michael Woods
/// @version 1.0
/// @date 27/05/17
///--------------------------------------------------------------------

class Window : public QOpenGLWindow
{
public:
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief class ctor for the main scene
    ///----------------------------------------------------------------------------------------------------------------------
    Window();
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief class destructor
    ///----------------------------------------------------------------------------------------------------------------------
    ~Window();
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief Initialising scene
    ///----------------------------------------------------------------------------------------------------------------------
    void initializeGL();
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief paint function
    ///----------------------------------------------------------------------------------------------------------------------
    void paintGL();
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief Resizing the window
    ///----------------------------------------------------------------------------------------------------------------------
    void resizeGL(QResizeEvent *_event);
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief Resizing the window
    ///----------------------------------------------------------------------------------------------------------------------
    void resizeGL(int _w, int _h);
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief A vector to store the objects
    ///----------------------------------------------------------------------------------------------------------------------
    std::vector <GeneralObj> objectsVector;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief pointer to Timer class
    ///----------------------------------------------------------------------------------------------------------------------
    Timer *m_timer;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief rotation of the world
    ///----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_globalRotation;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief overall rotation of the world
    ///----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_rotationCurrent;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief timer for the rotation
    ///----------------------------------------------------------------------------------------------------------------------
    int Rotationtimer=0;

private:
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief function to load Textures in from the texture shader
    ///----------------------------------------------------------------------------------------------------------------------
    void loadTexture();
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief resetting enemy positions after rotations
    ///----------------------------------------------------------------------------------------------------------------------
    void setEnemyRotForest();
    void setEnemyRotGarden();
    void checkEnemyPlayerCollisions();
    void bumpEnemy();
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief sets all enemy movement states-being displayed either active or chasing player
    ///----------------------------------------------------------------------------------------------------------------------
    void setEnemy();
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief checks amount of enemy-player hits
    ///----------------------------------------------------------------------------------------------------------------------
    void checkHit();
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief load to shader function
    ///----------------------------------------------------------------------------------------------------------------------
    void loadMatricesToShader();
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief key press event
    ///----------------------------------------------------------------------------------------------------------------------
    void keyPressEvent(QKeyEvent *_event);
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief mouse moved
    ///----------------------------------------------------------------------------------------------------------------------
    void mouseMoveEvent (QMouseEvent * _event );
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief mouse pressed
    ///----------------------------------------------------------------------------------------------------------------------
    void mousePressEvent ( QMouseEvent *_event);
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief mouse release
    ///----------------------------------------------------------------------------------------------------------------------
    void mouseReleaseEvent ( QMouseEvent *_event );
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief mouse wheel release
    ///----------------------------------------------------------------------------------------------------------------------
    void wheelEvent( QWheelEvent *_event);
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief function called when key is released
    ///----------------------------------------------------------------------------------------------------------------------
    void keyReleaseEvent(QKeyEvent *_event);
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief function to pause game
    ///----------------------------------------------------------------------------------------------------------------------
    void Pause();
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief function that resumes game
    ///----------------------------------------------------------------------------------------------------------------------
    void Resume();
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief function that resets when a new game is created
    ///----------------------------------------------------------------------------------------------------------------------
    void Reset();
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief draw function
    ///----------------------------------------------------------------------------------------------------------------------
    void drawScene(const std::string &_shader);
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief timer event
    ///----------------------------------------------------------------------------------------------------------------------
    void timerEvent (QTimerEvent *event);
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief function that moves the player based on key inputs
    ///----------------------------------------------------------------------------------------------------------------------
    void moveSphere();
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief This method checks if the position of the sphere is within the extents of the bounding boxes.
    /// Also used for item pickup.
    ///----------------------------------------------------------------------------------------------------------------------
    void BoundingBoxCollisions();
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief function that will rotate objects around the centre
    /// @param[in] _position is the position of the object
    /// @param[in] _rotation is the world global rotation
    /// @param[in] _initialRotation is the initial rotation of the object
    /// @param[in] _scale is the scaling of the object
    ///----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 PivotRotation(ngl::Vec3 _position,ngl::Mat4 _rotation,ngl::Vec3 _initialRotation,ngl::Vec3 _scale);
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief A method to test if two spheres are colliding
    /// @param[in] _pos1 The position of the first sphere
    /// @param[in] _radius1 The radius of the first sphere
    /// @param[in] _pos2 The position of the second sphere
    /// @param[in] _radius2 The radius of the second sphere
    ///----------------------------------------------------------------------------------------------------------------------
    bool sphereSphereCollision(  ngl::Vec3 _pos1, GLfloat _radius1, ngl::Vec3 _pos2, GLfloat _radius2 );
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief pointer to EnemyState
    ///----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<EnemyState>m_enemy;
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief rotation matrix for first enemy group
    ///----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_enemyGlobalRotation;
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief rotation matrix for second enemy group
    ///----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_enemyGlobalRotation2;
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief new rotation matrix for Forest enemy group
    ///----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 newEnemyRotPos;
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief new rotation matrix for Garden enemy group
    ///----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 newEnemyRotPos2;
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief enemy-player hit count
    ///----------------------------------------------------------------------------------------------------------------------
    int m_hit;
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief variables for mouse move event
    ///----------------------------------------------------------------------------------------------------------------------
    int m_spinXFace;
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief variables for mouse move event
    ///----------------------------------------------------------------------------------------------------------------------
    int m_spinYFace;
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief variable for mouse event
    ///----------------------------------------------------------------------------------------------------------------------
    int m_origX;
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief variable for mouse event
    ///----------------------------------------------------------------------------------------------------------------------
    int m_origY;
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief variable for mouse event
    ///----------------------------------------------------------------------------------------------------------------------
    int m_origXPos;
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief variable for mouse event
    ///----------------------------------------------------------------------------------------------------------------------
    int m_origYPos;
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief width of window
    ///----------------------------------------------------------------------------------------------------------------------
    int m_width;
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief height of window
    ///----------------------------------------------------------------------------------------------------------------------
    int m_height;
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief light timer variable
    ///----------------------------------------------------------------------------------------------------------------------
    int m_lightTimer;
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief timer for player movement
    ///----------------------------------------------------------------------------------------------------------------------
    int m_updateSphereTimer;
    int m_redrawTimer;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief variable to control quest progress
    ///----------------------------------------------------------------------------------------------------------------------
    int cureStage = m_gamePlay.cureStage();
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief variable to store how many ingredients have been picked up
    ///----------------------------------------------------------------------------------------------------------------------
    int ingredients = m_gamePlay.ingredients();
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief Partilce timer
    ///----------------------------------------------------------------------------------------------------------------------
    int m_particleTimer;
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief a timer that I increment to to control how long the game draws a message for the user
    ///----------------------------------------------------------------------------------------------------------------------
    int m_safeFromEruptionUiTimer;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief timer that turns on the general gameplay timer e,g plague and volcano timers, else it doesn't work
    int m_gameTimerStarterCounter;
    int m_fpsTimer;
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief enemy Forest attack state
    ///----------------------------------------------------------------------------------------------------------------------
    bool m_isAttacking=false;
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief enemy Garden attack state
    ///----------------------------------------------------------------------------------------------------------------------
    bool m_isAttacking2=false;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief boolean for mouse move event
    ///----------------------------------------------------------------------------------------------------------------------
    bool m_rotate;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief boolean for mouse move event
    ///----------------------------------------------------------------------------------------------------------------------
    bool m_translate;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to show you picked up lavender
    ///----------------------------------------------------------------------------------------------------------------------
    bool lavender = m_gamePlay.lavenderFlag();
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to show you picked up roses
    ///----------------------------------------------------------------------------------------------------------------------
    bool roses = m_gamePlay.rosesFlag();
    ///----------------------------------------------------------------------------------------------------------------------
    ///@ @brief flag to show you picked up mercury
    ///----------------------------------------------------------------------------------------------------------------------
    bool mercury = m_gamePlay.mercuryFlag();
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to show you picked up cloves
    ///----------------------------------------------------------------------------------------------------------------------
    bool cloves = m_gamePlay.clovesFlag();
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief Booleans for the light movement of light1
    ///----------------------------------------------------------------------------------------------------------------------
    bool lightMovementAB=true;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief Booleans for the light movement of light1
    ///----------------------------------------------------------------------------------------------------------------------
    bool lightMovementBC=false;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief Booleans for the light movement of light1
    ///----------------------------------------------------------------------------------------------------------------------
    bool lightMovementCD=false;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief Booleans for the light movement of light1
    ///----------------------------------------------------------------------------------------------------------------------
    bool lightMovementDA=false;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief Boolean for the volcano time
    ///----------------------------------------------------------------------------------------------------------------------
    bool volcanoTime;
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief   boolean to ask if the player is safe from eruption
    ///----------------------------------------------------------------------------------------------------------------------
    bool m_isSafeFromEruption;
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief boolean to ask if the safeFromEruptionTimer is triggered
    ///----------------------------------------------------------------------------------------------------------------------
    bool m_isSafeFromEruptionTimerTriggered;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief pointer to the player's position and cube rotation class
    ///----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<Sphere> m_sphere;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief unique pointer to light1
    ///----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<ngl::Light> m_light;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief unique pointer to light2
    ///----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<ngl::Light> m_light2;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief unique pointer to light3
    ///----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<ngl::Light> m_light3;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief unique pointer to light4
    ///----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<ngl::Light> m_light4;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief A pointer to the sphere bump
    ///----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<SphereBump> m_sphereBump;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief obj of our background
    ///----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<ngl::Obj> m_menuBackground;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief pointer to the terrain class
    ///----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<Terrain> m_terrain;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief instances for the on screen text printing
    ///----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<ngl::Text> m_text1;
    std::unique_ptr<ngl::Text> m_text2;
    std::unique_ptr<ngl::Text> m_printVtimer;
    std::unique_ptr<ngl::Text> m_printPtimer;
    std::unique_ptr<ngl::Text> m_printInstructions;
    std::unique_ptr<ngl::Text> m_printMenu;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief pointer to the emitter class
    ///----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<Emitter> m_emitter;
    ngl::Vec3 cube[6][1599];
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief Position of light 1
    ///----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_lightPosition1;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief Position of light 2
    ///----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_lightPosition2;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief Position of light 3
    ///----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_lightPosition3;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief Position of light 4
    ///----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_lightPosition4;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief model position
    ///----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_modelPos;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief getting the tree position to figure out if player is on that side
    ///----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_treePosition;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief getting the lavender position to figure out if player is on that side
    ///----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_lavenderPosition;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief Spread variable for the particles
    ///----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_spread;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief stores the position of the first and the last small cube on one terrain (opposite corners)
    ///----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 cubes[7][2];
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief first and the last cube of one terrain (opposite corners)
    ///----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_cubesFirstAndLast[7][2];
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief mouse transformation
    ///----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_mouseGlobalTX;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief Pointer to our camera
    ///----------------------------------------------------------------------------------------------------------------------
    ngl::Camera *m_cam;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief transformation
    ///----------------------------------------------------------------------------------------------------------------------
    ngl::Transformation m_transform;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief for the key press event
    ///----------------------------------------------------------------------------------------------------------------------
    QSet<Qt::Key> m_keysPressed;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief Pointer to our space background object
    ///----------------------------------------------------------------------------------------------------------------------
    Space *m_space;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief instance of class gamemenu.
    ///----------------------------------------------------------------------------------------------------------------------
    gamemenu m_menu;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief instance of clas UI.
    ///----------------------------------------------------------------------------------------------------------------------
    UI m_UI;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief instance of gamePlay class
    ///----------------------------------------------------------------------------------------------------------------------
    gamePlay m_gamePlay;
    ///----------------------------------------------------------------------------------------------------------------------
    /// @brief Texture name
    ///----------------------------------------------------------------------------------------------------------------------
    GLuint m_textureName;
    ///----------------------------------------------------------------------------------------------------------------------
    ///@brief gravity varibale for the particle system
    ///----------------------------------------------------------------------------------------------------------------------
    GLfloat m_gravity;
};

#endif
