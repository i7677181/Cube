#ifndef GAMEMENU_H
#define GAMEMENU_H

#include <memory>
#include <ngl/Vec3.h>
#include <ngl/VertexArrayObject.h>
#include <ngl/Transformation.h>
#include <ngl/Obj.h>

/// \author Michael Woods
/// \version 1.0
/// \date 16/5/20177
/// \class GameMenu
/// \brief This class creates and controls the game menu and how it is drawn.
///
class gamemenu{

public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief class constructor
    //----------------------------------------------------------------------------------------------------------------------
    gamemenu();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief draws a quad
    /// @param[in] texture ID
    //----------------------------------------------------------------------------------------------------------------------
    void drawQuad(int _texID);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief initiates the quad that is drawn for menu items
    //----------------------------------------------------------------------------------------------------------------------
    void menuQuad();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief sets variables to allow the game to start/draw
    //----------------------------------------------------------------------------------------------------------------------
    void playGame();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief draws instruction screen
    /// @param[in] texture ID
    //----------------------------------------------------------------------------------------------------------------------
    void instructions(int _texID);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief sets variables to create a new game
    //----------------------------------------------------------------------------------------------------------------------
    void newGame();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief exit game
    //----------------------------------------------------------------------------------------------------------------------
    void exit();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief draws the menu quads/buttons to the screen
    //----------------------------------------------------------------------------------------------------------------------
    void drawMenu();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief increases/decreases button scales depending on the menu state
    //----------------------------------------------------------------------------------------------------------------------
    void menuButtonScaling();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief increases the menu state
    //----------------------------------------------------------------------------------------------------------------------
    void increaseMenuState();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief decreases menu state
    //----------------------------------------------------------------------------------------------------------------------
    void decreaseMenuState();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief changes what functions will be called when menu state is changed in game
    //----------------------------------------------------------------------------------------------------------------------
    void menuStateSwitch();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief gets the menu bool from class object
    /// @param [out] returns the flag that gives if the menu is open (drawn to screen)
    //----------------------------------------------------------------------------------------------------------------------
    const bool &getMenuBool() const{ return m_menuFlag;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief sets if the menu is open
    /// @param [in] boolean, if menuFlag = true menu is open, if false menu is not open
    //----------------------------------------------------------------------------------------------------------------------
    void setMenuBool(bool bool_) {m_menuFlag=bool_;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    //----------------------------------------------------------------------------------------------------------------------
    const bool &getGamePlayBool() const{ return m_gameFlag;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief gets bool which states if gameplay is drawn
    /// @param[in] sets gameplay bool to true if gameplay is to be drawn, false if not drawn
    //----------------------------------------------------------------------------------------------------------------------
    void setGamePlayBool(bool gamebool_) {m_gameFlag = gamebool_;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief gets if intsruction menu is open
    /// @return returns if menu is open
    //----------------------------------------------------------------------------------------------------------------------
    const bool &getInstructionBool() const{ return m_instructionsFlag;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief sets if the instructions are drawn
    /// @param[in] instruction bool, if true menu is drawn
    //----------------------------------------------------------------------------------------------------------------------
    void setInstructionBool(bool instructionBool_) {m_instructionsFlag = instructionBool_;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to load transform matrices to shader.
    //----------------------------------------------------------------------------------------------------------------------
    void loadMatricesToMenuShader();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief draws all the quads to create the UI
    //----------------------------------------------------------------------------------------------------------------------
    void drawInstructions();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief gets value of menu state
    //----------------------------------------------------------------------------------------------------------------------
    int getMenuState() const;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief sets value of menu state
    /// @param[in] menustate which is the menu state variable
    //----------------------------------------------------------------------------------------------------------------------
    void setMenuState(int _menustate);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief gets if the Ui is open
    //----------------------------------------------------------------------------------------------------------------------
    bool getUiOpen() const;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief sets whether the Ui is open
    /// @param[in] boolean to control if the UI is open, true is open.
    //----------------------------------------------------------------------------------------------------------------------
    void setUiOpen(bool _UiOpen);

private:

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief scales button 1
    //----------------------------------------------------------------------------------------------------------------------
    int m_buttonScale1;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief scales button 2
    //----------------------------------------------------------------------------------------------------------------------
    int m_buttonScale2;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief scales button 3
    //----------------------------------------------------------------------------------------------------------------------
    int m_buttonScale3;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief scales button 4
    //----------------------------------------------------------------------------------------------------------------------
    int m_buttonScale4;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief value for menu state, controls what button you are going to select and what function will be called due to this value.
    //----------------------------------------------------------------------------------------------------------------------
    int m_mstate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief if the UI is open or not, used to stop UI being drawn during menu, instructions and game win/lose screens.
    //----------------------------------------------------------------------------------------------------------------------
    bool m_UiOpen;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to tell me when the menu is op, true = open, false = closed
    //----------------------------------------------------------------------------------------------------------------------
    bool m_menuFlag;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief   flag to tell me when the game is playing or not.
    //----------------------------------------------------------------------------------------------------------------------
    bool m_gameFlag;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to tell me if intsructions should be drawn
    //----------------------------------------------------------------------------------------------------------------------
    bool m_instructionsFlag;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief object of the UI quad
    //----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<ngl::VertexArrayObject> m_UIQuad;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief texture ID
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<GLint> m_menuTextureId;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief instance of ngl class for transformations on VAOs
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Transformation m_menuTransform;

};

#endif // GAMEMENU_H
